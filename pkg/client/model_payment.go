/*
 * DinoPay API
 *
 * This API allows sending and receiving payment through the DinoPay platform.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Payment A transfer of money from a source account to a destination account
type Payment struct {
	// Payment UUID
	Id *string `json:"id,omitempty"`
	// Payment amount
	Amount float32 `json:"amount"`
	// Payment currency
	Currency *string `json:"currency,omitempty"`
	SourceAccount Account `json:"sourceAccount"`
	DestinationAccount Account `json:"destinationAccount"`
	Status *PaymentStatus `json:"status,omitempty"`
	// A unique id generated by the customer for this payment
	CustomerTransactionId *string `json:"customerTransactionId,omitempty"`
	// Date and time when the payment was created expressed as a Unix timestamp
	CreatedAt *int32 `json:"createdAt,omitempty"`
	// Date and time when of the last update made to the payment expressed as a Unix timestamp
	UpdatedAt *int32 `json:"updatedAt,omitempty"`
}

// NewPayment instantiates a new Payment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayment(amount float32, sourceAccount Account, destinationAccount Account, ) *Payment {
	this := Payment{}
	this.Amount = amount
	this.SourceAccount = sourceAccount
	this.DestinationAccount = destinationAccount
	return &this
}

// NewPaymentWithDefaults instantiates a new Payment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDefaults() *Payment {
	this := Payment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Payment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Payment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Payment) SetId(v string) {
	o.Id = &v
}

// GetAmount returns the Amount field value
func (o *Payment) GetAmount() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Payment) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Payment) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Payment) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Payment) SetCurrency(v string) {
	o.Currency = &v
}

// GetSourceAccount returns the SourceAccount field value
func (o *Payment) GetSourceAccount() Account {
	if o == nil  {
		var ret Account
		return ret
	}

	return o.SourceAccount
}

// GetSourceAccountOk returns a tuple with the SourceAccount field value
// and a boolean to check if the value has been set.
func (o *Payment) GetSourceAccountOk() (*Account, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceAccount, true
}

// SetSourceAccount sets field value
func (o *Payment) SetSourceAccount(v Account) {
	o.SourceAccount = v
}

// GetDestinationAccount returns the DestinationAccount field value
func (o *Payment) GetDestinationAccount() Account {
	if o == nil  {
		var ret Account
		return ret
	}

	return o.DestinationAccount
}

// GetDestinationAccountOk returns a tuple with the DestinationAccount field value
// and a boolean to check if the value has been set.
func (o *Payment) GetDestinationAccountOk() (*Account, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DestinationAccount, true
}

// SetDestinationAccount sets field value
func (o *Payment) SetDestinationAccount(v Account) {
	o.DestinationAccount = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Payment) GetStatus() PaymentStatus {
	if o == nil || o.Status == nil {
		var ret PaymentStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetStatusOk() (*PaymentStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Payment) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given PaymentStatus and assigns it to the Status field.
func (o *Payment) SetStatus(v PaymentStatus) {
	o.Status = &v
}

// GetCustomerTransactionId returns the CustomerTransactionId field value if set, zero value otherwise.
func (o *Payment) GetCustomerTransactionId() string {
	if o == nil || o.CustomerTransactionId == nil {
		var ret string
		return ret
	}
	return *o.CustomerTransactionId
}

// GetCustomerTransactionIdOk returns a tuple with the CustomerTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCustomerTransactionIdOk() (*string, bool) {
	if o == nil || o.CustomerTransactionId == nil {
		return nil, false
	}
	return o.CustomerTransactionId, true
}

// HasCustomerTransactionId returns a boolean if a field has been set.
func (o *Payment) HasCustomerTransactionId() bool {
	if o != nil && o.CustomerTransactionId != nil {
		return true
	}

	return false
}

// SetCustomerTransactionId gets a reference to the given string and assigns it to the CustomerTransactionId field.
func (o *Payment) SetCustomerTransactionId(v string) {
	o.CustomerTransactionId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Payment) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Payment) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *Payment) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Payment) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Payment) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *Payment) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

func (o Payment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["sourceAccount"] = o.SourceAccount
	}
	if true {
		toSerialize["destinationAccount"] = o.DestinationAccount
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.CustomerTransactionId != nil {
		toSerialize["customerTransactionId"] = o.CustomerTransactionId
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePayment struct {
	value *Payment
	isSet bool
}

func (v NullablePayment) Get() *Payment {
	return v.value
}

func (v *NullablePayment) Set(val *Payment) {
	v.value = val
	v.isSet = true
}

func (v NullablePayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayment(val *Payment) *NullablePayment {
	return &NullablePayment{value: val, isSet: true}
}

func (v NullablePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


